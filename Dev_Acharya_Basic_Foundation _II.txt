1. Biggie Size - Given an array, write a function that changes all positive numbers in the array to the 
   string "big".  Example: makeItBig([-1,3,5,-5]) returns that same array, changed to [-1, "big", "big", -5].

Answer:

x =[-1, 3, 5, -5]
function makeItBig(arr){
  	var newArray =[];
  	for (var i=0; i<arr.length; i++){
  		
  		if(arr[i]<0){
  			newArray.push("big")
  		}
  		else {
  			newArray.push(arr[i]);
  		}	
	}
return newArray;
}
console.log(makeItBig(x));

	or,

x =[-1, 3, 5, -5]
function makeItBig(arr){
  	
  	for (var i=0; i<arr.length; i++){
  		
  		if(arr[i]<0){
  			arr[i]="big";
  		}
	}
return arr;
}
console.log(makeItBig(x));
=============================================================================
2. Print Low, Return High - Create a function that takes in an array of numbers.  The function should print 
the lowest value in the array, and return the highest value in the array.

Answer:

x =[1, 3, 5, 2]
function returnLowestHighest(arr){
	var lowest = arr[0];
	var highest = arr[0];
  	
  	for (var i=0; i<arr.length; i++){
  		
  		if(arr[i]<lowest){
  			lowest=arr[i];
  		}

  		if(arr[i]>highest){
  			highest=arr[i];
  		}
  		
	}
	console.log(lowest);
	// return lowest;
	return highest;
}
console.log(returnLowestHighest(x));
=============================================================================
3. Print One, Return Another - Build a function that takes in an array of numbers.  The function should print 
the second-to-last value in the array, and return the first odd value in the array.

Answer:

x=[-1,3,5,-5]
function printOneReturnAnother(arr){
  console.log(arr[arr.length-2]);
  return arr[0];
}
console.log(printOneReturnAnother(x));
==============================================================================
4. Double Vision - Given an array (similar to saying 'takes in an array'), create a function that returns a new 
array where each value in the original array has been doubled.  Calling double([1,2,3]) should return [2,4,6] 
without changing the original array.

Answer:

x=[1,2,3]
function doubleVision(arr){
  var newArray = [];
  for(var i=0; i<arr.length; i++){
    newArray.push(arr[i]*2); 
}
return newArray;
}
console.log(doubleVision(x));
=============================================================================
5. Count Positives - Given an array of numbers, create a function to replace the last value with the number of positive 
values found in the array.  Example, countPositives([-1,1,1,1]) changes the original array to [-1,1,1,3] and returns it.

Answer:

x=[1,2,3,8,9]
function countPositive(arr){
  var count = 0;
  var newArray = [];
  for(var i=0; i<arr.length; i++){
    if(arr[i]>0){
      count++;
    }
    arr[arr.length-1]=count; 
}
return arr;
}
console.log(countPositive(x));
=============================================================================
6. Evens and Odds - Create a function that accepts an array.  Every time that array has three odd values in a 
row, print "That's odd!".  Every time the array has three evens in a row, print "Even more so!".

Answer:

x=[1,2,3,9,2,1]
function evenAndOdds(arr){
  var odds=0;
  var evens=0;
  for (var i=0; i<arr.length;i++){
    
    if (arr[i]%2==1){
      odds++;
    } 
    if (arr[i]%2==0){
      evens++;
    }
    if (odds>=3){
      console.log("That's odd!") ;
      odds=0;
    } 
    if (evens>=3){
      console.log ("Even more so!");
      evens=0;
    }
   }  
}
evenAndOdds(x);
=============================================================================
7. Increment the Seconds - Given an array of numbers arr, add 1 to every other element, specifically those whose 
index is odd (arr[1], arr[3], arr[5], etc).  Afterward, console.log each array value and return arr.

Answer:

x=[1,2,3,9,2,1]
function incrementSecond(arr){
  
  for(var i=0; i<arr.length; i++){
  
  if(i%2!=0){
  arr[i]=arr[i]+1;
  }
  console.log(arr[i]);
}
return arr;
}
incrementSecond(x);

===============================================================================
8. Previous Lengths - You are passed an array (similar to saying 'takes in an array' or 'given an array') containing strings.  
Working within that same array, replace each string with a number - the length of the string at the previous array index - 
and return the array.  For example, previousLengths(["hello", "dojo", "awesome"]) should return ["hello", 5, 4]. Hint: Can 
for loops only go forward?

Answer:

x=["hello", "dojo", "awesome"]
function previousLength(arr){
  var count=0;
  for(var i=arr.length-1; i>0; i--){
    arr[i]=arr[i-1].length;
  }
  return arr;
}
previousLength(x);
=============================================================================
9. Add Seven - Build a function that accepts an array. Return a new array with all the values of the original, but add 7 
to each. Do not alter the original array.  Example, addSeven([1,2,3]) should return [8,9,10] in a new array.

Answer:

x=[1, 2, 3]
function addSeven(arr){
  var newArray=[];
  for(var i=0; i<arr.length; i++){
    newArray.push(arr[i]+7);
  }
  return newArray;
}
addSeven(x);
==============================================================================
10. Reverse Array - Given an array, write a function that reverses its values, in-place.  Example: reverse([3,1,6,4,2])
 returns the same array, but now contains values reversed like so... [2,4,6,1,3].  Do this without creating an empty 
 temporary array.  (Hint: you'll need to swap values).

Answer:

x=[1, 2, 3, 4, 5]
function reverseArray(arr){
  newArray=[];
  for(var i=arr.length-1; i>=0; i--){
  newArray.push(arr[i]);
  }
  return newArray;
}
reverseArray(x);
==============================================================================
11. Outlook: Negative - Given an array, create and return a new one containing all the values of the original array, 
but make them all negative (not simply multiplied by -1). Given [1,-3,5], return [-1,-3,-5].

Answer:
x=[1, 2, 3, 4, 5]
function negative(arr){
  newArray=[];
  for(var i=0; i<arr.length; i++){
    if(arr[i]>0){
      newArray.push(arr[i]-(arr[i]*2));
    }
    else{
      newArray.push(arr[i]);
    }
  }
  return newArray; 
}
negative(x);
=============================================================================
12. Always Hungry - Create a function that accepts an array, and prints "yummy" each time one of the values
 is equal to "food".  If no array values are "food", then print "I'm hungry" once.

Answer:

x=["food", 2, "food", 4]
function negative(arr){
  for(var i=0; i<arr.length; i++){
    if(arr[i]=="food"){
      console.log("Yummy")
    }
    else{
      console.log("I ama hungry")
    }
  }
}
negative(x);
===============================================================================
13. Swap Toward the Center - Given an array, swap the first and last values, third and third-to-last values, etc.  
Example: swapTowardCenter([true,42,"Ada",2,"pizza"]) turns the array into ["pizza", 42, "Ada", 2, true].  
swapTowardCenter([1,2,3,4,5,6]) turns the array into [6,2,4,3,5,1].  No need to return the array this time.

Answer:

var array=["pizza", 42, "Ada", 2, "true"]
var nums=[1,2,3,4,5,6]
function swapTowardCenter(arr){
	var temp=arr[0];
	arr[0]=arr[arr.length-1];
	arr[arr.length-1]=temp;
	var temp2=arr[2];
	arr[2]=arr[arr.length-3];
	arr[arr.length-3]=temp2;
	return arr
}
console.log(swapTowardCenter(array));
console.log(swapTowardCenter(nums));



===============================================================================
14. Scale the Array - Given an array arr and a number num, multiply all values in the array arr by the number 
num, and return the changed array arr.  For example, scaleArray([1,2,3], 3) should return [3,6,9].

Answer:

x=[1,2,3,4,5,6]
num=4
function scaleArray(arr,num){
  for(var i=0; i<arr.length; i++){
    arr[i]=arr[i]*num;
  }
  return arr;
}
scaleArray(x,num);
==============================================================================
